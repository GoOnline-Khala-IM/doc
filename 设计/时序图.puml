@startuml "用户向其他用户发消息"
actor 用户

用户 -> 消息服务: 向其他用户发送消息
消息服务 -> 认证服务: 检查用户身份
alt 用户不具有权限
    认证服务 -> 消息服务: 返回无权限
    消息服务 -> 用户: 拒绝请求
else 用户具有权限
    认证服务 -> 消息服务: 返回有权限
    消息服务 -> 关系服务: 检查用户是否有向其他用户发送消息的权限
    alt 用户不可以发消息
        关系服务 -> 消息服务: 返回无权限
        消息服务 -> 用户: 拒绝请求
    else 用户可以发消息
        关系服务 -> 消息服务: 返回有权限
        消息服务 -> 存储服务: 存储用户给其他用户的消息
        alt 存储失败
            存储服务 -> 消息服务: 返回存储失败
            消息服务 -> 用户: 返回请求失败
        else 存储成功
            存储服务 -> 消息服务: 消息标识
            消息服务 -> 推送服务: 推送该消息
            推送服务 -> 消息服务: 推送结果
            alt 推送失败
                消息服务 -> 用户: 发送成功
            else 推送成功
                消息服务 -> 用户: 发送失败
            end
        end
    end
end
@enduml

@startuml "用户接收离线消息"
actor 用户
用户 -> 消息服务: 请求给定id后/前的n条消息
note left: 此时用户刚上线\n需要拉取离线消息\n考虑本地认证减少
消息服务 -> 认证服务: 检查用户身份
alt 用户不具有权限
    认证服务 -> 消息服务: 返回无权限
    消息服务 -> 用户: 拒绝请求
else 用户具有权限
    loop 直到消息为空
        消息服务 -> 存储服务: 根据id获取用户消息列表
        存储服务 -> 消息服务: 返回用户的消息
        消息服务 -> 用户: 返回消息及下一条消息的id
    end
end
@enduml

@startuml "推送消息给用户"
actor 用户

loop 直到用户退出应用
    用户 -> 推送服务: 建立长连接
    note left: 目前先考虑单个\n用户只有一个客户端的场景
    loop 直到连接断开
        alt 推送服务收到需要推给该用户的消息
            loop 重试3次或操作成功
                推送服务 -> 用户: 推送消息
                用户 -> 推送服务: 确认收到包括id号在内的消息
                note left: 参考tcp来确保消息的可靠性
            end
            alt 推送不成功
                推送服务 -> 用户: 断开连接
            end
        end
    end
end
@enduml
